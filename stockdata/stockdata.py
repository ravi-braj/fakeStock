import requests
import json
from collections import OrderedDict

#class for collecting stock data from the AlphaVantage API
class stockdata:
	def __init__(self):
		self.apikey = 'I9VFWPXFG51RAZLX'
		self.url = 'https://www.alphavantage.co/query'


	#returns the historic price of a stock at a day frequency
	#sanitises the autogenerated names since spaces cant be used in django form references
	def getDaily(self, sym):
		params = dict(
			function = 'TIME_SERIES_DAILY',
			symbol = sym,
			apikey = self.apikey
		)

		try:
			response = requests.get(url=self.url, params=params)
			data = json.loads(response.text, object_pairs_hook=OrderedDict)

			cleaned = OrderedDict()

			for item in data["Time Series (Daily)"].items():
				newDict = dict();
				newDict['close'] = item[1]["4. close"]
				newDict['volume'] = item[1]["5. volume"]
				cleaned[item[0]] = newDict
			return cleaned

		#if we can't get the data from the api, return an empty dict
		except:
			return dict();

	#gets a quotation for a list of stocks
	#sanitises the autogenerated names since spaces cant be used in django form references
	def getQuotes(self, symbolList):
		params = dict(
			function = 'BATCH_STOCK_QUOTES',
			symbols = ",".join(symbolList),
			apikey = self.apikey
		)

		try:
			response = requests.get(url=self.url, params=params)
			data = json.loads(response.text, object_pairs_hook=OrderedDict)
			cleaned = OrderedDict()

			for item in data["Stock Quotes"]:
				newDict = dict();
				newDict['price'] = item["2. price"]
				newDict['volume'] = item["3. volume"]
				newDict['timestamp'] = item["4. timestamp"]
				sym = item["1. symbol"]
				cleaned[sym] = newDict

			return cleaned

		except:
			return dict();